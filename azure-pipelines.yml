# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: PowerShell@2
  displayName: 'Get project version for ClickOnce'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$doc = Get-Content -Path .\OOFScheduling\OOFSponder.csproj
      $version = ([string]$doc.Project.PropertyGroup.ApplicationVersion -Replace "\.", "_").Trim()
      $installUrl = ([string]$doc.Project.PropertyGroup.InstallUrl).Trim()
      $ring = (Select-String '([^\/]+\/?$)' -Input $installUrl).Matches.Value.TrimEnd('/')

      Write-host "clickOnceVersion = " + $env:$version
      Write-host "Ring = " + $env:$ring

      Write-Output "##vso[task.setvariable variable=clickOnceVersion]$version"
      Write-Output "##vso[task.setvariable variable=deploymentRing]$ring"
      
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'Get-ChildItem -Recurse . | Where { ! $_.PSIsContainer } | Select Name,FullName,Length'

- task: CmdLine@2
  displayName: 'Mage run 1 (manifest)'
  condition: ne(variables['deploymentRing'], 'alpha')
  inputs:
    script: '"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\mage.exe" -u "$(buildPath)\OOFScheduling\publish\Application Files\OOFSponder_$(clickOnceVersion)\OOFSponder.exe.manifest"'

- task: CmdLine@2
  displayName: 'Mage run 2 (clickonce)'
  condition: ne(variables['deploymentRing'], 'alpha')
  inputs:
    script: '"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\mage.exe" -u $(buildPath)\OOFScheduling\publish\OOFSponder.application -appm "$(buildPath)\app.publish\Application Files\OOFSponder_$(clickOnceVersion)\OOFSponder.exe.manifest"'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
