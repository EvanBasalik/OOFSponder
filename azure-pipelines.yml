# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  buildPath: '$(System.DefaultWorkingDirectory)\OOFScheduling\bin\$(buildConfiguration)'
    
steps:
- task: PowerShell@2
  displayName: 'Get project version for ClickOnce'
  inputs:
    targetType: 'inline'
    script: |
      [xml]$doc = Get-Content -Path .\OOFScheduling\OOFSponder.csproj
      $version = ([string]$doc.Project.PropertyGroup.ApplicationVersion -Replace "\.", "_").Trim()
      $installUrl = ([string]$doc.Project.PropertyGroup.InstallUrl).Trim()
      $ring = (Select-String '([^\/]+\/?$)' -Input $installUrl).Matches.Value.TrimEnd('/')

      Write-host "clickOnceVersion = $($version)"
      Write-host "Ring = $($ring)"

      Write-Output "##vso[task.setvariable variable=clickOnceVersion]$version"
      Write-Output "##vso[task.setvariable variable=deploymentRing]$ring"
      
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Build project'
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/target:publish'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: PowerShell@2
  displayName: List files and folders
  inputs:
    targetType: 'inline'
    script: 'Get-ChildItem -Recurse . | Where { ! $_.PSIsContainer } | Select FullName'

#- task: CmdLine@2
#  displayName: 'Mage run 1 (manifest)'
#  inputs:
#    script: '"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\mage.exe" -u "$(buildPath)\app.publish\Application Files\OOFScheduling_$(clickOnceVersion)\OOFScheduling.exe.manifest"'

#- task: CmdLine@2
#  displayName: 'Mage run 2 (clickonce)'
#  inputs:
#    script: '"C:\Program Files (x86)\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.8 Tools\mage.exe" -u $(buildPath)\app.publish\OOFScheduling.application -appm "$(buildPath)\app.publish\Application Files\OOFScheduling_$(clickOnceVersion)\OOFScheduling.exe.manifest"'

- task: AzureFileCopy@4
  displayName: 'Copy files to Free Trial oofsponder Blob storage'
  inputs:
    SourcePath: '$(buildPath)\app.publish\*'
    azureSubscription: 'Azure Free Trial(69b80647-f472-4a6c-b5d2-fd02dda66c77)'
    Destination: 'AzureBlob'
    storage: 'oofsponder'
    ContainerName: 'deploy'
    BlobPrefix: '$(deploymentRing)'

- task: AzurePowerShell@5
  displayName: "Copy files to EvanBaCore"
  env:
    sasSecretKey: $(OOFSponderDeployKey) # the recommended way to map to an env variable
  inputs:
    azureSubscription: 'Azure Free Trial(69b80647-f472-4a6c-b5d2-fd02dda66c77)'
    ScriptType: 'InlineScript'
    Inline: |
      $localFolder = '$(buildPath)\app.publish\'
      $StorageAccountName = 'oofsponderdeploy'
      $ContainerName = 'deploy'
      $ring = '$(deploymentRing)'

      $sasSecretKey=$env:sasSecretKey
      Write-Host "Leading characters of $($sasSecretKey.Substring(0,6))"

      Write-Host "Getting Storage Context..." -NoNewline
      $ctx =New-AzStorageContext -StorageAccountName $StorageAccountName -StorageAccountKey $sasSecretKey
      Write-Host "Done" -ForegroundColor Green

      Write-Host "Getting container $($ContainerName)..." -NoNewline
      $container = Get-AzStorageContainer -Name $ContainerName -Context $ctx
      Write-Host "Done" -ForegroundColor Green
      
      if ($container) {
      
              $filesToUpload = Get-ChildItem $localFolder -Recurse -File
      
              foreach($file in $filesToUpload)
              {
                Write-Host "Processing " + $file.Name
                $directoryName = $file.Directory.Name
                $filename = $file.Name
              
                $blobName = $ring + "/" + $destfolder + $file.FullName.Substring($file.FullName.IndexOf($localFolder) + $localFolder.Length+1)
          
                write-host "copying $directoryName\$filename to $blobName"
      
                #$Properties = @{"CacheControl" = "max-age=$maxAge"; "ContentType" = $mimeType}
                #Set-AzStorageBlobContent -File $file.FullName -Container $container.Name -Blob $blobName -Context $ctx -Force -Properties $Properties
                Set-AzStorageBlobContent -Container $container.Name -File $file.FullName -Blob $blobName -Context $ctx -Force
              }
              write-host "All files in $localFolder uploaded to $($container.Name)!"
      }
    azurePowerShellVersion: 'LatestVersion'
